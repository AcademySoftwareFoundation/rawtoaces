# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CI

on:
  push:
    #branches: [ "master" ]
  pull_request:
    #branches: [ "master" ]

jobs:
  aswf:
    name: "VFX${{matrix.vfxyear}} ${{matrix.desc}}"
    runs-on: ${{ matrix.os }}
    container:
      image: ${{ matrix.container }}
      
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      
      matrix:
        include:
          - desc: gcc11 # /C++17 boost1.8 exr3.1
            nametag: linux-vfx2023
            os: ubuntu-latest
            container: aswf/ci-osl:2023-clang15
            vfxyear: 2023
            cxx_std: 17
          - desc: clang15 # /C++17 boost1.8 exr3.1
            nametag: linux-vfx2022-clang13
            os: ubuntu-latest
            container: aswf/ci-osl:2023-clang15
            vfxyear: 2023
            cc_compiler: clang
            cxx_compiler: clang++
            cxx_std: 17
    env:
      CXX: ${{matrix.cxx_compiler}}
      CC: ${{matrix.cc_compiler}}
      CMAKE_CXX_STANDARD: ${{matrix.cxx_std}}
      OPENEXR_VERSION: ${{matrix.openexr_ver}}
      CMAKE_CXX_FLAGS: "-lstdc++fs"
    steps:
      - uses: actions/checkout@v4

      - name: Print
        shell: bash
        run: |
          echo "CXX=${CXX}"
          echo "matrix.cxx_compiler=${{matrix.cxx_compiler}}"
          yum search ceres-solver
          
      - name: Dependencies
        shell: bash
        run: |
            build_scripts/install_aces_container.bash
            sudo yum install --setopt=tsflags=nodocs -y eigen3-devel ceres-solver-devel LibRaw-devel json-devel

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
            cmake -B build -S .
#            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
#            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
#            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Build
        run: sudo cmake --build build

      - name: Test
        working-directory: build
        run: ctest --rerun-failed --output-on-failure

##################################

  build:
    runs-on: ${{ matrix.os }}
    name: "${{matrix.os}} ${{matrix.c_compiler}}"

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        title: [ubuntu, windows, macos]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - title: windows
            os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            install_deps: install_deps_windows
            toolchain_file: "C:/vcpkg/scripts/buildsystems/vcpkg.cmake"
            build_shared_libs: OFF
          - title: ubuntu
            os: ubuntu-24.04
            c_compiler: gcc
            cpp_compiler: g++
            install_deps: install_deps_linux
            build_shared_libs: ON
          - title: ubuntu
            os: ubuntu-24.04
            cpp_compiler: clang++
            install_deps: install_deps_linux
            build_shared_libs: ON
          - title: macos
            os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            install_deps: install_deps_mac
            build_shared_libs: ON
        exclude:
          - title: windows
            c_compiler: gcc
          - title: windows
            c_compiler: clang
          - title: ubuntu
            c_compiler: cl
          - title: macos
            c_compiler: cl
          - title: macos
            c_compiler: gcc

    env:
      CMAKE_CXX_FLAGS: "-lstdc++fs"
      
    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Dependencies
      shell: bash
      run: |
        build_scripts/install_aces_container.bash
        build_scripts/${{ matrix.install_deps }}.bash

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake
        -B ${{ steps.strings.outputs.build-output-dir }}
        -S ${{ github.workspace }}
        -DCXX_STANDARD=C++17
        -DCMAKE_TOOLCHAIN_FILE="${{ matrix.toolchain_file }}"
        -DENABLE_SHARED="${{ matrix.build_shared_libs }}"
        
    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }} --rerun-failed --output-on-failure
