///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2013 Academy of Motion Picture Arts and Sciences
// ("A.M.P.A.S."). Portions contributed by others as indicated.
// All rights reserved.
//
// A worldwide, royalty-free, non-exclusive right to copy, modify, create
// derivatives, and use, in source and binary forms, is hereby granted,
// subject to acceptance of this license. Performance of any of the
// aforementioned acts indicates acceptance to be bound by the following
// terms and conditions:
//
//  * Copies of source code, in whole or in part, must retain the
//    above copyright notice, this list of conditions and the
//    Disclaimer of Warranty.
//
//  * Use in binary form must retain the above copyright notice,
//    this list of conditions and the Disclaimer of Warranty in the
//    documentation and/or other materials provided with the distribution.
//
//  * Nothing in this license shall be deemed to grant any rights to
//    trademarks, copyrights, patents, trade secrets or any other
//    intellectual property of A.M.P.A.S. or any contributors, except
//    as expressly stated herein.
//
//  * Neither the name "A.M.P.A.S." nor the name of any other
//    contributors to this software may be used to endorse or promote
//    products derivative of or based on this software without express
//    prior written permission of A.M.P.A.S. or the contributors, as
//    appropriate.
//
// This license shall be construed pursuant to the laws of the State of
// California, and any disputes related thereto shall be subject to the
// jurisdiction of the courts therein.
//
// Disclaimer of Warranty: THIS SOFTWARE IS PROVIDED BY A.M.P.A.S. AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
// BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT ARE DISCLAIMED. IN NO
// EVENT SHALL A.M.P.A.S., OR ANY CONTRIBUTORS OR DISTRIBUTORS, BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, RESITUTIONARY,
// OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
// THE POSSIBILITY OF SUCH DAMAGE.
//
// WITHOUT LIMITING THE GENERALITY OF THE FOREGOING, THE ACADEMY
// SPECIFICALLY DISCLAIMS ANY REPRESENTATIONS OR WARRANTIES WHATSOEVER
// RELATED TO PATENT OR OTHER INTELLECTUAL PROPERTY RIGHTS IN THE ACADEMY
// COLOR ENCODING SYSTEM, OR APPLICATIONS THEREOF, HELD BY PARTIES OTHER
// THAN A.M.P.A.S., WHETHER DISCLOSED OR UNDISCLOSED.
///////////////////////////////////////////////////////////////////////////

#define BOOST_TEST_MAIN
#include <boost/test/unit_test.hpp>
#include <boost/filesystem.hpp>
#include <boost/test/floating_point_comparison.hpp>

#include "../lib/mathOps.h"
#include "../lib/rta.h"

using namespace std;
using namespace rta;

BOOST_AUTO_TEST_CASE ( TestSpst_DefaultConstructor ) {
    char * brand;
    char * model;
    uint8_t increment = 5;
    uint8_t len = 4;
    
    brand = (char *) malloc(len+1);
    memset(brand, 0x0, len);
    memcpy(brand, "test", len);
    brand[len] = '\0';
    
    model = (char *) malloc(len+1);
    memset(model, 0x0, len);
    memcpy(model, "test", len);
    model[len] = '\0';
    
    vector < RGBSen > rgbsen;
    for (int i=0; i<81; i++) {
        rgbsen.push_back( RGBSen(1.0, 1.0, 1.0) );
    }
    
    // Default Constructor
    Spst * spstobject1 = new Spst ();
    
    spstobject1->setBrand(brand);
    spstobject1->setModel(model);
    spstobject1->setWLIncrement(increment);
    spstobject1->setSensitivity(rgbsen);
    
//    boost::test_tools::const_string csBrand(spstobject1->getBrand());
//    BOOST_CHECK_THROW( csBrand.at( csBrand.size()+1 ), std::out_of_range );

    BOOST_CHECK_EQUAL( std::strcmp( spstobject1->getBrand(), "test" ), 0 );
    BOOST_CHECK_EQUAL( std::strcmp( spstobject1->getModel(), "test" ), 0 );
    BOOST_CHECK_EQUAL( int( spstobject1->getWLIncrement() ), 5 );
    BOOST_CHECK_EQUAL( int( spstobject1->getSensitivity().size() ), 81 );
    
    
    vector < RGBSen > rgbsen_cp = spstobject1->getSensitivity();
    
    FORI (81) {
        BOOST_CHECK_EQUAL( rgbsen_cp[i]._RSen, 1.0 );
        BOOST_CHECK_EQUAL( rgbsen_cp[i]._GSen, 1.0 );
        BOOST_CHECK_EQUAL( rgbsen_cp[i]._BSen, 1.0 );
    }
};

BOOST_AUTO_TEST_CASE ( TestSpst_Constructor2 ) {
    char * brand;
    char * model;
    uint8_t increment = 5;
    uint8_t len = 4;
    
    brand = (char *) malloc(len+1);
    memset(brand, 0x0, len);
    memcpy(brand, "test", len);
    brand[len] = '\0';
    
    model = (char *) malloc(len+1);
    memset(model, 0x0, len);
    memcpy(model, "test", len);
    model[len] = '\0';
    
    vector < RGBSen > rgbsen;
    FORI(81) {
        rgbsen.push_back( RGBSen(1.0, 1.0, 1.0) );
    }
    
    // Constructor 2
    Spst spstobject2 (brand, model, increment, rgbsen);
    
    BOOST_CHECK_EQUAL( std::strcmp( spstobject2.getBrand(), "test" ), 0 );
    BOOST_CHECK_EQUAL( std::strcmp( spstobject2.getModel(), "test" ), 0 );
    BOOST_CHECK_EQUAL( int( spstobject2.getWLIncrement() ), increment );
    BOOST_CHECK_EQUAL( int( spstobject2.getSensitivity().size() ), 81 );
    
    vector < RGBSen > rgbsen_cp = spstobject2.getSensitivity();
    
    FORI (81) {
        BOOST_CHECK_EQUAL( rgbsen_cp[i]._RSen, 1.0 );
        BOOST_CHECK_EQUAL( rgbsen_cp[i]._GSen, 1.0 );
        BOOST_CHECK_EQUAL( rgbsen_cp[i]._BSen, 1.0 );
    }
};

BOOST_AUTO_TEST_CASE ( TestSpst_CopyConstructor ) {
    char * brand;
    char * model;
    uint8_t increment = 5;
    uint8_t len = 4;
    
    brand = (char *) malloc(len+1);
    memset(brand, 0x0, len);
    memcpy(brand, "test", len);
    brand[len] = '\0';
    
    model = (char *) malloc(len+1);
    memset(model, 0x0, len);
    memcpy(model, "test", len);
    model[len] = '\0';
    
    vector < RGBSen > rgbsen;
    for (int i=0; i<81; i++) {
        rgbsen.push_back( RGBSen(1.0, 1.0, 1.0) );
    }
    
    // Default Constructor
    Spst * spstobject1 = new Spst ();
    
    spstobject1->setBrand(brand);
    spstobject1->setModel(model);
    spstobject1->setWLIncrement(increment);
    spstobject1->setSensitivity(rgbsen);
    
    Spst spstobject3 (*spstobject1);
    
    BOOST_CHECK_EQUAL( std::strcmp( spstobject3.getBrand(), "test" ), 0 );
    BOOST_CHECK_EQUAL( std::strcmp( spstobject3.getModel(), "test" ), 0 );
    BOOST_CHECK_EQUAL( int( spstobject3.getWLIncrement() ), 5 );
    BOOST_CHECK_EQUAL( int( spstobject3.getSensitivity().size() ), 81 );

    vector < RGBSen > rgbsen_cp = spstobject3.getSensitivity();
    
    FORI (81) {
        BOOST_CHECK_EQUAL( rgbsen_cp[i]._RSen, 1.0 );
        BOOST_CHECK_EQUAL( rgbsen_cp[i]._GSen, 1.0 );
        BOOST_CHECK_EQUAL( rgbsen_cp[i]._BSen, 1.0 );
    }
};

BOOST_AUTO_TEST_CASE( TestIDT_DataAccess ) {
    char * brand1, * brand2, * brand3;
    char * model1, * model2, * model3;
    uint8_t len = 6;
    
    brand1 = (char *) malloc(len+1);
    memset(brand1, 0x0, len);
    memcpy(brand1, "", len);
    brand1[len] = '\0';
    
    brand2 = (char *) malloc(len+1);
    memset(brand2, 0x0, len);
    memcpy(brand2, "b2", len);
    brand2[len] = '\0';
    
    brand3 = (char *) malloc(len+1);
    memset(brand3, 0x0, len);
    memcpy(brand3, "brand3", len);
    brand3[len] = '\0';
    
    model1 = (char *) malloc(len+1);
    memset(model1, 0x0, len);
    memcpy(model1, "", len);
    model1[len] = '\0';
    
    model2 = (char *) malloc(len+1);
    memset(model2, 0x0, len);
    memcpy(model2, "m2", len);
    model2[len] = '\0';
    
    model3 = (char *) malloc(len+1);
    memset(model3, 0x0, len);
    memcpy(model3, "model3", len);
    model3[len] = '\0';
    
    vector < RGBSen > rgbsen1, rgbsen2, rgbsen3;
    for (int i=0; i<81; i++) {
        rgbsen1.push_back( RGBSen( 1.00000001, 1.0, 0.999999999 ) );
        rgbsen2.push_back( RGBSen( 1.0, 1.0, 1.0) );
        rgbsen3.push_back( RGBSen( -0.9999999999999, 1e-3, 1.0000000000001) );

    }
    
    Spst * spstobject1 = new Spst ();
    
    spstobject1->setBrand(brand1);
    spstobject1->setModel(model1);
    spstobject1->setWLIncrement(5);
    spstobject1->setSensitivity(rgbsen1);
    
    BOOST_CHECK_EQUAL( std::strcmp( spstobject1->getBrand(), "" ), 0 );
    BOOST_CHECK_EQUAL( std::strcmp( spstobject1->getModel(), "" ), 0 );
    BOOST_CHECK_EQUAL( int( spstobject1->getWLIncrement() ), 5 );
    
    vector < RGBSen > rgbsen_cp = spstobject1->getSensitivity();
    
    FORI (81) {
        BOOST_CHECK_CLOSE (rgbsen_cp[i]._RSen, 1.00000001, 1e-5);
        BOOST_CHECK_CLOSE( rgbsen_cp[i]._GSen, 1.0, 1e-5 );
        BOOST_CHECK_CLOSE( rgbsen_cp[i]._BSen, 0.999999999, 1e-5);
    }
    
    Spst spstobject2 (brand2, model2, 10, rgbsen2);
    
    BOOST_CHECK_EQUAL( std::strcmp( spstobject2.getBrand(), "b2" ), 0 );
    BOOST_CHECK_EQUAL( std::strcmp( spstobject2.getModel(), "m2" ), 0 );
    BOOST_CHECK_EQUAL( int( spstobject2.getWLIncrement() ), 10 );
    
    rgbsen_cp.clear();
    rgbsen_cp = spstobject2.getSensitivity();
    
    FORI (81) {
        BOOST_CHECK_CLOSE (rgbsen_cp[i]._RSen, 1.0, 1e-5);
        BOOST_CHECK_CLOSE( rgbsen_cp[i]._GSen, 1.0, 1e-5 );
        BOOST_CHECK_CLOSE( rgbsen_cp[i]._BSen, 1.0, 1e-5);
    }
    
    Spst spstobject3 (spstobject2);
    
    spstobject3.setBrand(brand3);
    spstobject3.setModel(model3);
    spstobject3.setWLIncrement(20);
    spstobject3.setSensitivity(rgbsen3);
    
    BOOST_CHECK_EQUAL( std::strcmp( spstobject3.getBrand(), "brand3" ), 0 );
    BOOST_CHECK_EQUAL( std::strcmp( spstobject3.getModel(), "model3" ), 0 );
    BOOST_CHECK_EQUAL( int( spstobject3.getWLIncrement() ), 20 );
    
    rgbsen_cp.clear();
    rgbsen_cp = spstobject3.getSensitivity();
    
    FORI (81) {
        BOOST_CHECK_CLOSE (rgbsen_cp[i]._RSen, -0.9999999999999, 1e-5);
        BOOST_CHECK_CLOSE( rgbsen_cp[i]._GSen, 1e-3, 1e-5 );
        BOOST_CHECK_CLOSE( rgbsen_cp[i]._BSen, 1.0000000000001, 1e-5);
    }
};

BOOST_AUTO_TEST_CASE ( TestIDT_LoadSpst ) {
    uint8_t len = 6;
    char * brand = (char *) malloc(len+1);

    memset(brand, 0x0, len);
    memcpy(brand, "arri", len);
    brand[len] = '\0';
    
    char * model = (char *) malloc(len+1);
    memset(model, 0x0, len);
    memcpy(model, "d21", len);
    model[len] = '\0';
    
    Idt * idtTest = new Idt();
    boost::filesystem::path absolutePath = boost::filesystem::absolute \
                                           ("../../data/camera/arri_d21_380_780_5.json");
    
    idtTest->loadCameraSpst ( absolutePath.string(), brand, model );
    
    const Spst spstTest = idtTest->getCameraSpst();
    const vector <RGBSen> rgbsenTest = spstTest.getSensitivity();
    
    double rgb[81][3] = {
        { 0.000188205,  8.59E-05,  9.58E-05 },
        { 0.000440222,  0.000166118,  0.000258734 },
        { 0.001561591,  0.00046321,  0.001181466 },
        { 0.006218858,  0.001314864,  0.006881015 },
        { 0.022246734,  0.003696276,  0.031937733 },
        { 0.049120511,  0.00805609,  0.087988515 },
        { 0.102812947,  0.017241631,  0.216210301 },
        { 0.105467801,  0.021953991,  0.276918236 },
        { 0.117352663,  0.028731455,  0.384008295 },
        { 0.108489774,  0.036438901,  0.498308108 },
        { 0.078494347,  0.037473311,  0.485933057 },
        { 0.06542927,  0.047763009,  0.618489235 },
        { 0.05126662,  0.057989658,  0.696558624 },
        { 0.038300854,  0.063272391,  0.711794157 },
        { 0.036088371,  0.078451972,  0.821540625 },
        { 0.038076306,  0.099730024,  0.918286066 },
        { 0.036894365,  0.112097767,  0.818615612 },
        { 0.044395944,  0.156013174,  0.907103055 },
        { 0.055918682,  0.217501304,  1 },
        { 0.060307176,  0.238434493,  0.86480047 },
        { 0.066779015,  0.269670797,  0.878082723 },
        { 0.074505107,  0.300101812,  0.874303769 },
        { 0.07562978,  0.290737255,  0.704674036 },
        { 0.085791103,  0.328330642,  0.628143997 },
        { 0.108943209,  0.424666004,  0.588816784 },
        { 0.138099867,  0.523135173,  0.513082855 },
        { 0.168736396,  0.591697868,  0.436252915 },
        { 0.220667659,  0.742521719,  0.392230422 },
        { 0.268662105,  0.832207187,  0.343540362 },
        { 0.321560163,  0.912162297,  0.312675861 },
        { 0.37671682,  0.976493082,  0.304109232 },
        { 0.410777194,  0.973507973,  0.292240658 },
        { 0.421878401,  1,  0.291164917 },
        { 0.388993508,  0.931244461,  0.269598208 },
        { 0.354154608,  0.889356652,  0.248312101 },
        { 0.34283344,  0.762661473,  0.213286579 },
        { 0.380725719,  0.693921344,  0.194295275 },
        { 0.469885563,  0.5991218,  0.170597248 },
        { 0.599407862,  0.530315531,  0.155055826 },
        { 0.713821326,  0.418038191,  0.1317383 },
        { 0.80813316,  0.340043294,  0.116047887 },
        { 0.939975954,  0.27676007,  0.104954578 },
        { 1,  0.217867885,  0.093258038 },
        { 0.956064245,  0.155062572,  0.076556466 },
        { 0.894704087,  0.11537981,  0.064641572 },
        { 0.767742902,  0.089103008,  0.053623886 },
        { 0.798777151,  0.083004112,  0.052099277 },
        { 0.763111509,  0.075973825,  0.04909842 },
        { 0.682557924,  0.067551041,  0.044677337 },
        { 0.56116663,  0.056571832,  0.0382092 },
        { 0.436680781,  0.045437665,  0.031713716 },
        { 0.414781937,  0.042487508,  0.030781211 },
        { 0.380963428,  0.03912278,  0.029786697 },
        { 0.305406639,  0.032338965,  0.026385578 },
        { 0.260012751,  0.028342775,  0.02448327 },
        { 0.191033296,  0.022001542,  0.020646569 },
        { 0.141171909,  0.017151907,  0.017480635 },
        { 0.122396106,  0.01528005,  0.015881482 },
        { 0.102299712,  0.013443924,  0.01414462 },
        { 0.07855096,  0.011348793,  0.011965207 },
        { 0.060474144,  0.009399874,  0.009474274 },
        { 0.041685047,  0.007185144,  0.006997807 },
        { 0.028123563,  0.005351653,  0.005182991 },
        { 0.02203961,  0.004473424,  0.004168945 },
        { 0.017482165,  0.003764279,  0.003387594 },
        { 0.012357413,  0.002865598,  0.002507749 },
        { 0.008721969,  0.001999441,  0.001714727 },
        { 0.006462905,  0.001438107,  0.001233306 },
        { 0.00454705,  0.001049424,  0.000918575 },
        { 0.002933579,  0.000695583,  0.000587696 },
        { 0.00211892,  0.000533403,  0.000436494 },
        { 0.001499002,  0.000394215,  0.000315097 },
        { 0.001022687,  0.000293059,  0.000238467 },
        { 0.000681853,  0.000211926,  0.000168269 },
        { 0.000561613,  0.000202539,  0.000170632 },
        { 0.000384839,  0.000125687,  8.94E-05 },
        { 0.000286597,  0.000104774,  6.92E-05 },
        { 0.000269169,  0.000138887,  0.000126057 },
        { 0.000163058,  6.47E-05,  4.57E-05 },
        { 0.000149065,  7.26E-05,  5.84E-05 },
        { 3.71E-05,  0.0,  2.70E-06}
    };
    
    BOOST_CHECK_EQUAL( int( rgbsenTest.size() ), 81 );
    BOOST_CHECK_EQUAL( std::strcmp( spstTest.getBrand(), "arri" ), 0 );
    BOOST_CHECK_EQUAL( std::strcmp( spstTest.getModel(), "d21" ), 0 );
    BOOST_CHECK_EQUAL( int( spstTest.getWLIncrement() ), 5 );
    
    FORI (81) {
        BOOST_CHECK_CLOSE ( double (rgbsenTest[i]._RSen), rgb[i][0], 1e-5);
        BOOST_CHECK_CLOSE ( double (rgbsenTest[i]._GSen), rgb[i][1], 1e-5 );
        BOOST_CHECK_CLOSE ( double (rgbsenTest[i]._BSen), rgb[i][2], 1e-5);
    }
};


BOOST_AUTO_TEST_CASE ( TestIDT_LoadIllum) {
    Idt * idtTest = new Idt();
    
    vector < string > illumPaths;
    boost::filesystem::path absolutePath = boost::filesystem::absolute\
                                           ("../../data/illuminant/iso7589_stutung_380_780_5.json");
    illumPaths.push_back(absolutePath.string());

    idtTest->loadIlluminant ( illumPaths, "iso7589" );
    
    Illum illumTest = (idtTest->getIlluminants())[0];
    
    double iso7589[81] = {
        0.0400000000000,
        0.0500000000000,
        0.0600000000000,
        0.0700000000000,
        0.0800000000000,
        0.0900000000000,
        0.1000000000000,
        0.1100000000000,
        0.1200000000000,
        0.1325000000000,
        0.1450000000000,
        0.1575000000000,
        0.1700000000000,
        0.1800000000000,
        0.1900000000000,
        0.2025000000000,
        0.2150000000000,
        0.2275000000000,
        0.2400000000000,
        0.2525000000000,
        0.2650000000000,
        0.2800000000000,
        0.2950000000000,
        0.3075000000000,
        0.3200000000000,
        0.3350000000000,
        0.3500000000000,
        0.3650000000000,
        0.3800000000000,
        0.3925000000000,
        0.4050000000000,
        0.4225000000000,
        0.4400000000000,
        0.4550000000000,
        0.4700000000000,
        0.4850000000000,
        0.5000000000000,
        0.5125000000000,
        0.5250000000000,
        0.5400000000000,
        0.5550000000000,
        0.5675000000000,
        0.5800000000000,
        0.5950000000000,
        0.6100000000000,
        0.6225000000000,
        0.6350000000000,
        0.6475000000000,
        0.6600000000000,
        0.6750000000000,
        0.6900000000000,
        0.7025000000000,
        0.7150000000000,
        0.7275000000000,
        0.7400000000000,
        0.7525000000000,
        0.7650000000000,
        0.7750000000000, 
        0.7850000000000, 
        0.7975000000000, 
        0.8100000000000, 
        0.8225000000000, 
        0.8350000000000, 
        0.8475000000000, 
        0.8600000000000, 
        0.8700000000000, 
        0.8800000000000, 
        0.8900000000000, 
        0.9000000000000, 
        0.9100000000000, 
        0.9200000000000, 
        0.9275000000000, 
        0.9350000000000, 
        0.9450000000000, 
        0.9550000000000, 
        0.9650000000000, 
        0.9750000000000, 
        0.9800000000000, 
        0.9850000000000, 
        0.9925000000000, 
        1.0000000000000
    };
    
    BOOST_CHECK_EQUAL( illumTest.getIllumType(), "iso7589" );
    BOOST_CHECK_EQUAL( illumTest.getIllumInc(), 5 );

    vector <double> illumTestData = illumTest.getIllumData();
    BOOST_CHECK_EQUAL( int( illumTestData.size() ), 81 );
    FORI (81) BOOST_CHECK_CLOSE ( illumTestData[i], iso7589[i], 1e-5);
};


BOOST_AUTO_TEST_CASE ( TestIDTLoadTS ) {
    Idt * idtTest = new Idt();
    
    boost::filesystem::path absolutePath = boost::filesystem::absolute\
                                           ("../../data/training/training_spectral.json");
    idtTest->loadTrainingData ( absolutePath.string() );
    
    vector < trainSpec > tsTest = idtTest->getTrainingSpec();
    printf("%d\n", int(tsTest.size()));

};


BOOST_AUTO_TEST_CASE ( TestIDT_LoadCMF ) {
    Idt * idtTest = new Idt();
    
    boost::filesystem::path absolutePath = boost::filesystem::absolute\
                                           ("../../data/cmf/cmf_1931.json");

    idtTest->loadCMF ( absolutePath.string() );
    vector < CMF > cmfTest = idtTest->getCMF();
    
    double cmf[401][3] = {
        { 0.001368, 3.90E-05, 0.006450001 },
        { 0.00150205, 4.28E-05, 0.007083216 },
        { 0.001642328, 4.69E-05, 0.007745488 },
        { 0.001802382, 5.16E-05, 0.008501152 },
        { 0.001995757, 5.72E-05, 0.009414544 },
        { 0.002236, 6.40E-05, 0.01054999 },
        { 0.002535385, 7.23E-05, 0.0119658 },
        { 0.002892603, 8.22E-05, 0.01365587 },
        { 0.003300829, 9.35E-05, 0.01558805 },
        { 0.003753236, 0.000106136, 0.01773015 },
        { 0.004243, 0.00012, 0.02005001 },
        { 0.004762389, 0.000134984, 0.02251136 },
        { 0.005330048, 0.000151492, 0.02520288 },
        { 0.005978712, 0.000170208, 0.02827972 },
        { 0.006741117, 0.000191816, 0.03189704 },
        { 0.00765, 0.000217, 0.03621 },
        { 0.008751373, 0.000246907, 0.04143771 },
        { 0.01002888, 0.00028124, 0.04750372 },
        { 0.0114217, 0.00031852, 0.05411988 },
        { 0.01286901, 0.000357267, 0.06099803 },
        { 0.01431, 0.000396, 0.06785001 },
        { 0.01570443, 0.000433715, 0.07448632 },
        { 0.01714744, 0.000473024, 0.08136156 },
        { 0.01878122, 0.000517876, 0.08915364 },
        { 0.02074801, 0.000572219, 0.09854048 },
        { 0.02319, 0.00064, 0.1102 },
        { 0.02620736, 0.00072456, 0.1246133 },
        { 0.02978248, 0.0008255, 0.1417017 },
        { 0.03388092, 0.00094116, 0.1613035 },
        { 0.03846824, 0.00106988, 0.1832568 },
        { 0.04351, 0.00121, 0.2074 },
        { 0.0489956, 0.001362091, 0.2336921 },
        { 0.0550226, 0.001530752, 0.2626114 },
        { 0.0617188, 0.001720368, 0.2947746 },
        { 0.069212, 0.001935323, 0.3307985 },
        { 0.07763, 0.00218, 0.3713 },
        { 0.08695811, 0.0024548, 0.4162091 },
        { 0.09717672, 0.002764, 0.4654642 },
        { 0.1084063, 0.0031178, 0.5196948 },
        { 0.1207672, 0.0035264, 0.5795303 },
        { 0.13438, 0.004, 0.6456 },
        { 0.1493582, 0.00454624, 0.7184838 },
        { 0.1653957, 0.00515932, 0.7967133 },
        { 0.1819831, 0.00582928, 0.8778459 },
        { 0.198611, 0.00654616, 0.959439 },
        { 0.21477, 0.0073, 1.0390501 },
        { 0.2301868, 0.008086507, 1.1153673 },
        { 0.2448797, 0.00890872, 1.1884971 },
        { 0.2587773, 0.00976768, 1.2581233 },
        { 0.2718079, 0.01066443, 1.3239296 },
        { 0.2839, 0.0116, 1.3856 },
        { 0.2949438, 0.01257317, 1.4426352 },
        { 0.3048965, 0.01358272, 1.4948035 },
        { 0.3137873, 0.01462968, 1.5421903 },
        { 0.3216454, 0.01571509, 1.5848807 },
        { 0.3285, 0.01684, 1.62296 },
        { 0.3343513, 0.01800736, 1.6564048 },
        { 0.3392101, 0.01921448, 1.6852959 },
        { 0.3431213, 0.02045392, 1.7098745 },
        { 0.3461296, 0.02171824, 1.7303821 },
        { 0.34828, 0.023, 1.74706 },
        { 0.3495999, 0.02429461, 1.7600446 },
        { 0.3501474, 0.02561024, 1.7696233 },
        { 0.350013, 0.02695857, 1.7762637 },
        { 0.349287, 0.02835125, 1.7804334 },
        { 0.34806, 0.0298, 1.7826 },
        { 0.3463733, 0.03131083, 1.7829682 },
        { 0.3442624, 0.03288368, 1.7816998 },
        { 0.3418088, 0.03452112, 1.7791982 },
        { 0.3390941, 0.03622571, 1.7758671 },
        { 0.3362, 0.038, 1.77211 },
        { 0.3331977, 0.03984667, 1.7682589 },
        { 0.3300411, 0.041768, 1.764039 },
        { 0.3266357, 0.043766, 1.7589438 },
        { 0.3228868, 0.04584267, 1.7524663 },
        { 0.3187, 0.048, 1.7441 },
        { 0.3140251, 0.05024368, 1.7335595 },
        { 0.308884, 0.05257304, 1.7208581 },
        { 0.3032904, 0.05498056, 1.7059369 },
        { 0.2972579, 0.05745872, 1.6887372 },
        { 0.2908, 0.06, 1.6692 },
        { 0.2839701, 0.06260197, 1.6475287 },
        { 0.2767214, 0.06527752, 1.6234127 },
        { 0.2689178, 0.06804208, 1.5960223 },
        { 0.2604227, 0.07091109, 1.564528 },
        { 0.2511, 0.0739, 1.5281 },
        { 0.2408475, 0.077016, 1.4861114 },
        { 0.2298512, 0.0802664, 1.4395215 },
        { 0.2184072, 0.0836668, 1.3898799 },
        { 0.2068115, 0.0872328, 1.3387362 },
        { 0.19536, 0.09098, 1.28764 },
        { 0.1842136, 0.09491755, 1.2374223 },
        { 0.1733273, 0.09904584, 1.1878243 },
        { 0.1626881, 0.1033674, 1.1387611 },
        { 0.1522833, 0.1078846, 1.090148 },
        { 0.1421, 0.1126, 1.0419 },
        { 0.1321786, 0.117532, 0.9941976 },
        { 0.1225696, 0.1226744, 0.9473473 },
        { 0.1132752, 0.1279928, 0.9014531 },
        { 0.1042979, 0.1334528, 0.8566193 },
        { 0.09564, 0.13902, 0.8129501 },
        { 0.08729955, 0.1446764, 0.7705173 },
        { 0.07930804, 0.1504693, 0.7294448 },
        { 0.07171776, 0.1564619, 0.6899136 },
        { 0.06458099, 0.1627177, 0.6521049 },
        { 0.05795001, 0.1693, 0.6162 },
        { 0.05186211, 0.1762431, 0.5823286 },
        { 0.04628152, 0.1835581, 0.5504162 },
        { 0.04115088, 0.1912735, 0.5203376 },
        { 0.03641283, 0.199418, 0.4919673 },
        { 0.03201, 0.20802, 0.46518 },
        { 0.0279172, 0.2171199, 0.4399246 },
        { 0.0241444, 0.2267345, 0.4161836 },
        { 0.020687, 0.2368571, 0.3938822 },
        { 0.0175404, 0.2474812, 0.3729459 },
        { 0.0147, 0.2586, 0.3533 },
        { 0.01216179, 0.2701849, 0.3348578 },
        { 0.00991996, 0.2822939, 0.3175521 },
        { 0.00796724, 0.2950505, 0.3013375 },
        { 0.006296346, 0.308578, 0.2861686 },
        { 0.0049, 0.323, 0.272 },
        { 0.003777173, 0.3384021, 0.2588171 },
        { 0.00294532, 0.3546858, 0.2464838 },
        { 0.00242488, 0.3716986, 0.2347718 },
        { 0.002236293, 0.3892875, 0.2234533 },
        { 0.0024, 0.4073, 0.2123 },
        { 0.00292552, 0.4256299, 0.2011692 },
        { 0.00383656, 0.4443096, 0.1901196 },
        { 0.00517484, 0.4633944, 0.1792254 },
        { 0.00698208, 0.4829395, 0.1685608 },
        { 0.0093, 0.503, 0.1582 },
        { 0.01214949, 0.5235693, 0.1481383 },
        { 0.01553588, 0.544512, 0.1383758 },
        { 0.01947752, 0.56569, 0.1289942 },
        { 0.02399277, 0.5869653, 0.1200751 },
        { 0.0291, 0.6082, 0.1117 },
        { 0.03481485, 0.6293456, 0.1039048 },
        { 0.04112016, 0.6503068, 0.09666748 },
        { 0.04798504, 0.6708752, 0.08998272 },
        { 0.05537861, 0.6908424, 0.08384531 },
        { 0.06327, 0.71, 0.07824999 },
        { 0.07163501, 0.7281852, 0.07320899 },
        { 0.08046224, 0.7454636, 0.06867816 },
        { 0.08973996, 0.7619694, 0.06456784 },
        { 0.09945645, 0.7778368, 0.06078835 },
        { 0.1096, 0.7932, 0.05725001 },
        { 0.1201674, 0.8081104, 0.05390435 },
        { 0.1311145, 0.8224962, 0.05074664 },
        { 0.1423679, 0.8363068, 0.04775276 },
        { 0.1538542, 0.8494916, 0.04489859 },
        { 0.1655, 0.862, 0.04216 },
        { 0.1772571, 0.8738108, 0.03950728 },
        { 0.18914, 0.8849624, 0.03693564 },
        { 0.2011694, 0.8954936, 0.03445836 },
        { 0.2133658, 0.9054432, 0.03208872 },
        { 0.2257499, 0.9148501, 0.02984 },
        { 0.2383209, 0.9237348, 0.02771181 },
        { 0.2510668, 0.9320924, 0.02569444 },
        { 0.2639922, 0.9399226, 0.02378716 },
        { 0.2771017, 0.9472252, 0.02198925 },
        { 0.2904, 0.954, 0.0203 },
        { 0.3038912, 0.9602561, 0.01871805 },
        { 0.3175726, 0.9660074, 0.01724036 },
        { 0.3314384, 0.9712606, 0.01586364 },
        { 0.3454828, 0.9760225, 0.01458461 },
        { 0.3597, 0.9803, 0.0134 },
        { 0.3740839, 0.9840924, 0.01230723 },
        { 0.3886396, 0.9874182, 0.01130188 },
        { 0.4033784, 0.9903128, 0.01037792 },
        { 0.4183115, 0.9928116, 0.009529306 },
        { 0.4334499, 0.9949501, 0.008749999 },
        { 0.4487953, 0.9967108, 0.0080352 },
        { 0.464336, 0.9980983, 0.0073816 },
        { 0.480064, 0.999112, 0.0067854 },
        { 0.4959713, 0.9997482, 0.0062428 },
        { 0.5120501, 1, 0.005749999 },
        { 0.5282959, 0.9998567, 0.0053036 },
        { 0.5446916, 0.9993046, 0.0048998 },
        { 0.5612094, 0.9983255, 0.0045342 },
        { 0.5778215, 0.9968987, 0.0042024 },
        { 0.5945, 0.995, 0.0039 },
        { 0.6112209, 0.9926005, 0.0036232 },
        { 0.6279758, 0.9897426, 0.0033706 },
        { 0.6447602, 0.9864444, 0.0031414 },
        { 0.6615697, 0.9827241, 0.0029348 },
        { 0.6784, 0.9786, 0.002749999 },
        { 0.6952392, 0.9740837, 0.0025852 },
        { 0.7120586, 0.9691712, 0.0024386 },
        { 0.7288284, 0.9638568, 0.0023094 },
        { 0.7455188, 0.9581349, 0.0021968 },
        { 0.7621, 0.952, 0.0021 },
        { 0.7785432, 0.9454504, 0.002017733 },
        { 0.7948256, 0.9384992, 0.0019482 },
        { 0.8109264, 0.9311628, 0.0018898 },
        { 0.8268248, 0.9234576, 0.001840933 },
        { 0.8425, 0.9154, 0.0018 },
        { 0.8579325, 0.9070064, 0.001766267 },
        { 0.8730816, 0.8982772, 0.0017378 },
        { 0.8878944, 0.8892048, 0.0017112 },
        { 0.9023181, 0.8797816, 0.001683067 },
        { 0.9163, 0.87, 0.001650001 },
        { 0.9297995, 0.8598613, 0.001610133 },
        { 0.9427984, 0.849392, 0.0015644 },
        { 0.9552776, 0.838622, 0.0015136 },
        { 0.9672179, 0.8275813, 0.001458533 },
        { 0.9786, 0.8163, 0.0014 },
        { 0.9893856, 0.8047947, 0.001336667 },
        { 0.9995488, 0.793082, 0.00127 },
        { 1.0090892, 0.781192, 0.001205 },
        { 1.0180064, 0.7691547, 0.001146667 },
        { 1.0263, 0.757, 0.0011 },
        { 1.0339827, 0.7447541, 0.0010688 },
        { 1.040986, 0.7324224, 0.0010494 },
        { 1.047188, 0.7200036, 0.0010356 },
        { 1.0524667, 0.7074965, 0.0010212 },
        { 1.0567, 0.6949, 0.001 },
        { 1.0597944, 0.6822192, 0.00096864 },
        { 1.0617992, 0.6694716, 0.00092992 },
        { 1.0628068, 0.6566744, 0.00088688 },
        { 1.0629096, 0.6438448, 0.00084256 },
        { 1.0622, 0.631, 0.0008 },
        { 1.0607352, 0.6181555, 0.00076096 },
        { 1.0584436, 0.6053144, 0.00072368 },
        { 1.0552244, 0.5924756, 0.00068592 },
        { 1.0509768, 0.5796379, 0.00064544 },
        { 1.0456, 0.5668, 0.0006 },
        { 1.0390369, 0.5539611, 0.000547867 },
        { 1.0313608, 0.5411372, 0.0004916 },
        { 1.0226662, 0.5283528, 0.0004354 },
        { 1.0130477, 0.5156323, 0.000383467 },
        { 1.0026, 0.503, 0.00034 },
        { 0.9913675, 0.4904688, 0.000307253 },
        { 0.9793314, 0.4780304, 0.00028316 },
        { 0.9664916, 0.4656776, 0.00026544 },
        { 0.9528479, 0.4534032, 0.000251813 },
        { 0.9384, 0.4412, 0.00024 },
        { 0.923194, 0.42908, 0.000229547 },
        { 0.907244, 0.417036, 0.00022064 },
        { 0.890502, 0.405032, 0.00021196 },
        { 0.87292, 0.393032, 0.000202187 },
        { 0.8544499, 0.381, 0.00019 },
        { 0.835084, 0.3689184, 0.000174213 },
        { 0.814946, 0.3568272, 0.00015564 },
        { 0.794186, 0.3447768, 0.00013596 },
        { 0.772954, 0.3328176, 0.000116853 },
        { 0.7514, 0.321, 0.0001 },
        { 0.7295836, 0.3093381, 8.61E-05 },
        { 0.7075888, 0.2978504, 7.46E-05 },
        { 0.6856022, 0.2865936, 6.50E-05 },
        { 0.6638104, 0.2756245, 5.69E-05 },
        { 0.6424, 0.265, 5.00E-05 },
        { 0.6215149, 0.2547632, 4.42E-05 },
        { 0.6011138, 0.2448896, 3.95E-05 },
        { 0.5811052, 0.2353344, 3.57E-05 },
        { 0.5613977, 0.2260528, 3.26E-05 },
        { 0.5419, 0.217, 3.00E-05 },
        { 0.5225995, 0.2081616, 2.77E-05 },
        { 0.5035464, 0.1995488, 2.56E-05 },
        { 0.4847436, 0.1911552, 2.36E-05 },
        { 0.4661939, 0.1829744, 2.18E-05 },
        { 0.4479, 0.175, 2.00E-05 },
        { 0.4298613, 0.1672235, 1.81E-05 },
        { 0.412098, 0.1596464, 1.62E-05 },
        { 0.394644, 0.1522776, 1.42E-05 },
        { 0.3775333, 0.1451259, 1.21E-05 },
        { 0.3608, 0.1382, 1.00E-05 },
        { 0.3444563, 0.1315003, 7.73E-06 },
        { 0.3285168, 0.1250248, 5.40E-06 },
        { 0.3130192, 0.1187792, 3.20E-06 },
        { 0.2980011, 0.1127691, 1.33E-06 },
        { 0.2835, 0.107, 0 },
        { 0.2695448, 0.1014762, 0 },
        { 0.2561184, 0.09618864, 0 },
        { 0.2431896, 0.09112296, 0 },
        { 0.2307272, 0.08626485, 0 },
        { 0.2187, 0.0816, 0 },
        { 0.2070971, 0.07712064, 0 },
        { 0.1959232, 0.07282552, 0 },
        { 0.1851708, 0.06871008, 0 },
        { 0.1748323, 0.06476976, 0 },
        { 0.1649, 0.061, 0 },
        { 0.1553667, 0.05739621, 0 },
        { 0.14623, 0.05395504, 0 },
        { 0.13749, 0.05067376, 0 },
        { 0.1291467, 0.04754965, 0 },
        { 0.1212, 0.04458, 0 },
        { 0.1136397, 0.04175872, 0 },
        { 0.106465, 0.03908496, 0 },
        { 0.09969044, 0.03656384, 0 },
        { 0.09333061, 0.03420048, 0 },
        { 0.0874, 0.032, 0 },
        { 0.08190096, 0.02996261, 0 },
        { 0.07680428, 0.02807664, 0 },
        { 0.07207712, 0.02632936, 0 },
        { 0.06768664, 0.02470805, 0 },
        { 0.0636, 0.0232, 0 },
        { 0.05980685, 0.02180077, 0 },
        { 0.05628216, 0.02050112, 0 },
        { 0.05297104, 0.01928108, 0 },
        { 0.04981861, 0.01812069, 0 },
        { 0.04677, 0.017, 0 },
        { 0.04378405, 0.01590379, 0 },
        { 0.04087536, 0.01483718, 0 },
        { 0.03807264, 0.01381068, 0 },
        { 0.03540461, 0.01283478, 0 },
        { 0.0329, 0.01192, 0 },
        { 0.03056419, 0.01106831, 0 },
        { 0.02838056, 0.01027339, 0 },
        { 0.02634484, 0.009533311, 0 },
        { 0.02445275, 0.008846157, 0 },
        { 0.0227, 0.00821, 0 },
        { 0.02108429, 0.007623781, 0 },
        { 0.01959988, 0.007085424, 0 },
        { 0.01823732, 0.006591476, 0 },
        { 0.01698717, 0.006138485, 0 },
        { 0.01584, 0.005723, 0 },
        { 0.01479064, 0.005343059, 0 },
        { 0.01383132, 0.004995796, 0 },
        { 0.01294868, 0.004676404, 0 },
        { 0.0121292, 0.004380075, 0 },
        { 0.01135916, 0.004102, 0 },
        { 0.01062935, 0.003838453, 0 },
        { 0.009938846, 0.003589099, 0 },
        { 0.009288422, 0.003354219, 0 },
        { 0.008678854, 0.003134093, 0 },
        { 0.008110916, 0.002929, 0 },
        { 0.007582388, 0.002738139, 0 },
        { 0.007088746, 0.002559876, 0 },
        { 0.006627313, 0.002393244, 0 },
        { 0.006195408, 0.002237275, 0 },
        { 0.005790346, 0.002091, 0 },
        { 0.005409826, 0.001953587, 0 },
        { 0.005052583, 0.00182458, 0 },
        { 0.004717512, 0.00170358, 0 },
        { 0.004403507, 0.001590187, 0 },
        { 0.004109457, 0.001484, 0 },
        { 0.003833913, 0.001384496, 0 },
        { 0.003575748, 0.001291268, 0 },
        { 0.003334342, 0.001204092, 0 },
        { 0.003109075, 0.001122744, 0 },
        { 0.002899327, 0.001047, 0 },
        { 0.002704348, 0.00097659, 0 },
        { 0.00252302, 0.000911109, 0 },
        { 0.002354168, 0.000850133, 0 },
        { 0.002196616, 0.000793238, 0 },
        { 0.00204919, 0.00074, 0 },
        { 0.00191096, 0.000690083, 0 },
        { 0.001781438, 0.00064331, 0 },
        { 0.00166011, 0.000599496, 0 },
        { 0.001546459, 0.000558455, 0 },
        { 0.001439971, 0.00052, 0 },
        { 0.001340042, 0.000483914, 0 },
        { 0.001246275, 0.000450053, 0 },
        { 0.001158471, 0.000418345, 0 },
        { 0.00107643, 0.000388718, 0 },
        { 0.000999949, 0.0003611, 0 },
        { 0.000928736, 0.000335384, 0 },
        { 0.000862433, 0.00031144, 0 },
        { 0.00080075, 0.000289166, 0 },
        { 0.000743396, 0.000268454, 0 },
        { 0.000690079, 0.0002492, 0 },
        { 0.000640516, 0.000231302, 0 },
        { 0.000594502, 0.000214686, 0 },
        { 0.000551865, 0.000199288, 0 },
        { 0.000512429, 0.000185048, 0 },
        { 0.000476021, 0.0001719, 0 },
        { 0.000442454, 0.000159778, 0 },
        { 0.000411512, 0.000148604, 0 },
        { 0.000382981, 0.000138302, 0 },
        { 0.000356649, 0.000128793, 0 },
        { 0.000332301, 0.00012, 0 },
        { 0.000309759, 0.00011186, 0 },
        { 0.000288887, 0.000104322, 0 },
        { 0.000269539, 9.73E-05, 0 },
        { 0.000251568, 9.08E-05, 0 },
        { 0.000234826, 8.48E-05, 0 },
        { 0.000219171, 7.91E-05, 0 },
        { 0.000204526, 7.39E-05, 0 },
        { 0.000190841, 6.89E-05, 0 },
        { 0.000178065, 6.43E-05, 0 },
        { 0.000166151, 6.00E-05, 0 },
        { 0.000155024, 5.60E-05, 0 },
        { 0.000144622, 5.22E-05, 0 },
        { 0.00013491, 4.87E-05, 0 },
        { 0.000125852, 4.54E-05, 0 },
        { 0.000117413, 4.24E-05, 0 },
        { 0.000109552, 3.96E-05, 0 },
        { 0.000102225, 3.69E-05, 0 },
        { 9.54E-05, 3.44E-05, 0 },
        { 8.90E-05, 3.21E-05, 0 },
        { 8.31E-05, 3.00E-05, 0 },
        { 7.75E-05, 2.80E-05, 0 },
        { 7.23E-05, 2.61E-05, 0 },
        { 6.75E-05, 2.44E-05, 0 },
        { 6.29E-05, 2.27E-05, 0 },
        { 5.87E-05, 2.12E-05, 0 },
        { 5.48E-05, 1.98E-05, 0 },
        { 5.11E-05, 1.85E-05, 0 },
        { 4.77E-05, 1.72E-05, 0 },
        { 4.45E-05, 1.61E-05, 0 },
        { 4.15E-05, 1.50E-05, 0}
    };
    
    FORI (81) {
        BOOST_CHECK_CLOSE ( cmfTest[i]._xbar, cmf[i*5][0], 1e-5 );
        BOOST_CHECK_CLOSE ( cmfTest[i]._ybar, cmf[i*5][1], 1e-5 );
        BOOST_CHECK_CLOSE ( cmfTest[i]._zbar, cmf[i*5][2], 1e-5 );
    }
};

BOOST_AUTO_TEST_CASE ( TestIDT_Verbose ) {
    Idt * idtTest = new Idt ();
    
    idtTest->setVerbosity(1);
    BOOST_CHECK_EQUAL ( idtTest->getVerbosity(), 1 );
    
    idtTest->setVerbosity(3);
    BOOST_CHECK_EQUAL ( idtTest->getVerbosity(), 3 );
};

BOOST_AUTO_TEST_CASE ( TestIDT_scaleLSC ) {
    uint8_t len = 6;
    char * brand = (char *) malloc(len+1);
    
    memset(brand, 0x0, len);
    memcpy(brand, "nikon", len);
    brand[len] = '\0';
    
    char * model = (char *) malloc(len+1);
    memset(model, 0x0, len);
    memcpy(model, "d200", len);
    model[len] = '\0';
    
    Idt * idtTest = new Idt();
    Illum * illumTest = new Illum();
    
    boost::filesystem::path pathIllum = boost::filesystem::absolute \
                                        ("../../data/illuminant/iso7589_stutung_380_780_5.json");
    illumTest->readSPD ( pathIllum.string(), "iso7589" );
    
    boost::filesystem::path pathSpst = boost::filesystem::absolute \
                                       ("../../data/camera/nikon_D200_380_780_5.json");
    idtTest->loadCameraSpst ( pathSpst.string(), brand, model );
    
    idtTest->scaleLSC ( *illumTest );

    double scaledIllum[81] = {
        0.00546219526,
        0.00682774407,
        0.00819329289,
        0.00955884170,
        0.01092439052,
        0.01228993933,
        0.01365548815,
        0.01502103696,
        0.01638658578,
        0.01809352180,
        0.01980045781,
        0.02150739383,
        0.02321432985,
        0.02457987867,
        0.02594542748,
        0.02765236350,
        0.02935929952,
        0.03106623554,
        0.03277317155,
        0.03448010757,
        0.03618704359,
        0.03823536681,
        0.04028369004,
        0.04199062605,
        0.04369756207,
        0.04574588529,
        0.04779420852,
        0.04984253174,
        0.05189085496,
        0.05359779098,
        0.05530472700,
        0.05769443742,
        0.06008414785,
        0.06213247107,
        0.06418079429,
        0.06622911752,
        0.06827744074,
        0.06998437676,
        0.07169131277,
        0.07373963600,
        0.07578795922,
        0.07749489524,
        0.07920183126,
        0.08125015448,
        0.08329847770,
        0.08500541372,
        0.08671234974,
        0.08841928576,
        0.09012622177,
        0.09217454500,
        0.09422286822,
        0.09592980424,
        0.09763674025,
        0.09934367627,
        0.10105061229,
        0.10275754831,
        0.10446448433,
        0.10583003314,
        0.10719558196,
        0.10890251798,
        0.11060945399,
        0.11231639001,
        0.11402332603,
        0.11573026205,
        0.11743719807,
        0.11880274688,
        0.12016829570,
        0.12153384451,
        0.12289939333,
        0.12426494214,
        0.12563049096,
        0.12665465257,
        0.12767881418,
        0.12904436299,
        0.13040991181,
        0.13177546062,
        0.13314100944,
        0.13382378385,
        0.13450655825,
        0.13553071986,
        0.13655488148
    };
    
    const vector <double> illumDataScaled = illumTest->getIllumData();
 
    BOOST_CHECK_EQUAL( illumDataScaled.size(), 81 );
    BOOST_CHECK_EQUAL( illumTest->getIllumType(), "iso7589" );
    BOOST_CHECK_EQUAL( illumTest->getIllumInc(), 5 );
    FORI (81) BOOST_CHECK_CLOSE ( illumDataScaled[i], scaledIllum[i], 1e-5);
};

BOOST_AUTO_TEST_CASE ( TestIDT_CalCM ) {
    Idt * idtTest = new Idt ();
    
    uint8_t len = 6;
    char * brand = (char *) malloc(len+1);
    
    memset(brand, 0x0, len);
    memcpy(brand, "nikon", len);
    brand[len] = '\0';
    
    char * model = (char *) malloc(len+1);
    memset(model, 0x0, len);
    memcpy(model, "d200", len);
    model[len] = '\0';

    boost::filesystem::path pathSpst = boost::filesystem::absolute \
    ("../../data/camera/nikon_D200_380_780_5.json");
    idtTest->loadCameraSpst ( pathSpst.string(), brand, model );
    
    boost::filesystem::path pathIllum = boost::filesystem::absolute \
    ("../../data/illuminant/iso7589_stutung_380_780_5.json");
    vector < string > illumPaths;
    illumPaths.push_back( pathIllum.string() );
    idtTest->loadIlluminant ( illumPaths, "iso7589" );
    
    // need to choose the best illuminant
    idtTest->chooseIllumType("iso7589", 0);
    vector < double > CM = idtTest->calCM();

    vector < RGBSen > rgbsen = (idtTest->getCameraSpst()).getSensitivity();
    vector< vector < double > > rgbsenV (3, vector < double > ( rgbsen.size(), 1.0));

    FORI( rgbsen.size() ){
        rgbsenV[0][i] = rgbsen[i]._RSen;
        rgbsenV[1][i] = rgbsen[i]._GSen;
        rgbsenV[2][i] = rgbsen[i]._BSen;
    }

    Illum bestIllum = (idtTest->getIlluminants())[0];
    vector < double > CM_test = mulVector ( rgbsenV, bestIllum.getIllumData() );
    scaleVectorD ( CM_test );
    
    FORI ( CM.size() ) {
        printf ("%lf, %lf\n", CM[i], CM_test[i]);
        FORI(3) BOOST_CHECK_CLOSE ( CM[i], CM_test[i], 1e-5 );
    }
};

BOOST_AUTO_TEST_CASE ( TestIDT_CalWB ) {
    Idt * idtTest = new Idt ();
    
    uint8_t len = 6;
    char * brand = (char *) malloc(len+1);
    
    memset(brand, 0x0, len);
    memcpy(brand, "nikon", len);
    brand[len] = '\0';
    
    char * model = (char *) malloc(len+1);
    memset(model, 0x0, len);
    memcpy(model, "d200", len);
    model[len] = '\0';
    
    boost::filesystem::path pathSpst = boost::filesystem::absolute \
    ("../../data/camera/nikon_D200_380_780_5.json");
    idtTest->loadCameraSpst ( pathSpst.string(), brand, model );
    
    boost::filesystem::path pathIllum = boost::filesystem::absolute \
    ("../../data/illuminant/iso7589_stutung_380_780_5.json");
    vector < string > illumPaths;
    illumPaths.push_back( pathIllum.string() );
    idtTest->loadIlluminant ( illumPaths, "iso7589" );
    
    Illum bestIllum = (idtTest->getIlluminants())[0];
    vector < double > wb_tmp = idtTest->calWB( bestIllum, 0 );
    
};


